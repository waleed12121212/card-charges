@page "/admin/user/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject BlazingPizza.PizzaStoreContext Db
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Authorize]
@layout BlazingPizza.Components.Layout.AdminLayout

<PageTitle>إضافة مستخدم جديد</PageTitle>

@if (!IsAdmin)
{
    <div class="alert alert-danger" style="margin:2rem; text-align:center;">@Message</div>
}
else
{
    <div class="login-container">
        <div class="login-left">
            <div class="login-title">إضافة مستخدم جديد</div>
            <EditForm Model="Input" OnValidSubmit="CreateUser" FormName="create-user" method="post">
                <AntiforgeryToken />
                <DataAnnotationsValidator />
                <label class="login-form-label" for="username">اسم المستخدم</label>
                <InputText @bind-Value="Input.UserName" class="login-input" autocomplete="username" aria-required="true" placeholder="اسم المستخدم" />
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
                <label class="login-form-label" for="password">كلمة المرور</label>
                <InputText type="password" @bind-Value="Input.Password" class="login-input" autocomplete="new-password" aria-required="true" placeholder="كلمة المرور" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
                <label class="login-form-label" for="email">البريد الإلكتروني (اختياري)</label>
                <InputText @bind-Value="Input.Email" class="login-input" autocomplete="email" placeholder="البريد الإلكتروني" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
                <label class="login-form-label" for="phone">رقم الجوال (اختياري)</label>
                <InputText @bind-Value="Input.PhoneNumber" class="login-input" autocomplete="tel" placeholder="رقم الجوال" />
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                <label class="login-form-label" for="role">الدور</label>
                <InputSelect @bind-Value="Input.Role" class="login-input">
                    <option value="User">User</option>
                    <option value="Admin">Admin</option>
                </InputSelect>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
                <button type="submit" class="login-btn">إضافة</button>
                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="text-danger">@Message</div>
                }
            </EditForm>
        </div>
    </div>
}

@code {
    private InputModel Input { get; set; } = new();
    private string? Message;
    private bool IsAdmin { get; set; } = false;

    protected override void OnInitialized()
    {
        var user = HttpContextAccessor.HttpContext?.User;
        IsAdmin = user != null && user.Identity.IsAuthenticated && user.IsInRole("Admin");
        if (!IsAdmin)
        {
            Message = "هذه الصفحة متاحة فقط للمسؤولين (Admin).";
        }
    }

    private async Task CreateUser()
    {
        var user = HttpContextAccessor.HttpContext?.User;
        if (user == null || !user.Identity.IsAuthenticated || !user.IsInRole("Admin"))
        {
            Message = "فقط المستخدم الذي لديه صلاحية Admin يمكنه إنشاء حساب جديد.";
            return;
        }
        if (await Db.Users.AnyAsync(u => u.UserName == Input.UserName))
        {
            Message = "اسم المستخدم مستخدم بالفعل.";
            return;
        }
        var newUser = new CarrierStoreUser
        {
            UserName = Input.UserName,
            PasswordHash = BCrypt.Net.BCrypt.HashPassword(Input.Password),
            Email = Input.Email,
            PhoneNumber = Input.PhoneNumber,
            Role = Input.Role
        };
        Db.Users.Add(newUser);
        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo("/admin/user/index");
    }

    public class InputModel
    {
        [Required]
        public string UserName { get; set; } = string.Empty;
        [Required]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "كلمة المرور يجب أن تكون بين 6 و100 حرف.")]
        public string Password { get; set; } = string.Empty;
        [EmailAddress]
        public string? Email { get; set; }
        [Phone]
        public string? PhoneNumber { get; set; }
        [Required]
        public string Role { get; set; } = "User";
    }
}
