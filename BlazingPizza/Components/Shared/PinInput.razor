@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime

<div class="pin-container">
    <div class="pin-header">
        <h3>@Title</h3>
        <p>@Description</p>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="pin-error-message">
            <i class="fas fa-exclamation-triangle"></i>
            @ErrorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="pin-success-message">
            <i class="fas fa-check-circle"></i>
            @SuccessMessage
        </div>
    }

    <div class="pin-inputs-container">
        @for (int i = 0; i < 6; i++)
        {
            int index = i; // Local copy for closure
            <input @key="@($"pin-{index}")"
                   id="@($"pin-input-{index}")"
                   class="pin-input @(HasError ? "pin-input-error" : "")"
                   type="@(ShowNumbers ? "text" : "password")"
                   maxlength="1"
                   @bind="PinDigits[index]"
                   @onkeydown="@((e) => OnKeyDown(e, index))"
                   @oninput="@((e) => OnInput(e, index))"
                   @onfocus="@(() => OnFocus(index))"
                   inputmode="numeric"
                   pattern="[0-9]"
                   autocomplete="off"
                   readonly="@IsLoading" />
        }
    </div>

    @if (ShowToggleVisibility)
    {
        <div class="pin-toggle-container">
            <label class="pin-toggle-label">
                <input type="checkbox" @bind="ShowNumbers" />
                <span>إظهار الأرقام</span>
            </label>
        </div>
    }

    <div class="pin-actions">
        @if (ShowSubmitButton)
        {
            <button class="pin-submit-btn @(IsLoading ? "loading" : "")" 
                    @onclick="SubmitPin" 
                    disabled="@(IsLoading || !IsComplete)">
                @if (IsLoading)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>جاري التحقق...</span>
                }
                else
                {
                    <span>@SubmitButtonText</span>
                }
            </button>
        }

        @if (ShowClearButton)
        {
            <button class="pin-clear-btn" @onclick="ClearPin" disabled="@IsLoading">
                مسح
            </button>
        }
    </div>

    @if (ShowKeypad)
    {
        <div class="pin-keypad">
            @for (int i = 1; i <= 9; i++)
            {
                int digit = i;
                <button class="pin-keypad-btn" @onclick="() => AddDigit(digit.ToString())" disabled="@IsLoading">
                    @digit
                </button>
            }
            <button class="pin-keypad-btn pin-keypad-zero" @onclick="() => AddDigit(0.ToString())" disabled="@IsLoading">
                0
            </button>
            <button class="pin-keypad-btn pin-keypad-backspace" @onclick="RemoveLastDigit" disabled="@IsLoading">
                <i class="fas fa-backspace"></i>
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = "إدخال الرقم السري";
    [Parameter] public string Description { get; set; } = "يرجى إدخال الرقم السري المكون من 6 أرقام";
    [Parameter] public string SubmitButtonText { get; set; } = "تأكيد";
    [Parameter] public bool ShowSubmitButton { get; set; } = true;
    [Parameter] public bool ShowClearButton { get; set; } = true;
    [Parameter] public bool ShowToggleVisibility { get; set; } = true;
    [Parameter] public bool ShowKeypad { get; set; } = false;
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public string ErrorMessage { get; set; } = "";
    [Parameter] public string SuccessMessage { get; set; } = "";
    [Parameter] public EventCallback<string> OnPinSubmitted { get; set; }
    [Parameter] public EventCallback OnPinCleared { get; set; }

    private string[] PinDigits = new string[6];
    private bool ShowNumbers = false;
    private bool HasError => !string.IsNullOrEmpty(ErrorMessage);
    private bool IsComplete => PinDigits.All(d => !string.IsNullOrEmpty(d) && char.IsDigit(d[0]));

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("focusElement", "pin-input-0");
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e, int index)
    {
        if (e.Key == "Backspace")
        {
            if (string.IsNullOrEmpty(PinDigits[index]) && index > 0)
            {
                PinDigits[index - 1] = "";
                await JSRuntime.InvokeVoidAsync("focusElement", $"pin-input-{index - 1}");
            }
            else if (!string.IsNullOrEmpty(PinDigits[index]))
            {
                PinDigits[index] = "";
            }
            StateHasChanged();
        }
        else if (e.Key == "ArrowLeft" && index > 0)
        {
            await JSRuntime.InvokeVoidAsync("focusElement", $"pin-input-{index - 1}");
        }
        else if (e.Key == "ArrowRight" && index < 5)
        {
            await JSRuntime.InvokeVoidAsync("focusElement", $"pin-input-{index + 1}");
        }
        else if (e.Key == "Enter" && IsComplete)
        {
            await SubmitPin();
        }
    }

    private async Task OnInput(ChangeEventArgs e, int index)
    {
        var value = e.Value?.ToString() ?? "";
        
        if (string.IsNullOrEmpty(value))
        {
            PinDigits[index] = "";
            return;
        }

        // Allow only digits
        if (char.IsDigit(value[0]))
        {
            PinDigits[index] = value[0].ToString();
            
            // Move to next input
            if (index < 5)
            {
                await JSRuntime.InvokeVoidAsync("focusElement", $"pin-input-{index + 1}");
            }
            else if (IsComplete)
            {
                // Auto-submit when all digits are entered
                await SubmitPin();
            }
        }
        else
        {
            PinDigits[index] = "";
        }
        
        StateHasChanged();
    }

    private async Task OnFocus(int index)
    {
        await JSRuntime.InvokeVoidAsync("selectText", $"pin-input-{index}");
    }

    private async Task AddDigit(string digit)
    {
        for (int i = 0; i < 6; i++)
        {
            if (string.IsNullOrEmpty(PinDigits[i]))
            {
                PinDigits[i] = digit;
                if (i < 5)
                {
                    await JSRuntime.InvokeVoidAsync("focusElement", $"pin-input-{i + 1}");
                }
                else if (IsComplete)
                {
                    await SubmitPin();
                }
                break;
            }
        }
        StateHasChanged();
    }

    private async Task RemoveLastDigit()
    {
        for (int i = 5; i >= 0; i--)
        {
            if (!string.IsNullOrEmpty(PinDigits[i]))
            {
                PinDigits[i] = "";
                await JSRuntime.InvokeVoidAsync("focusElement", $"pin-input-{i}");
                break;
            }
        }
        StateHasChanged();
    }

    private async Task SubmitPin()
    {
        if (IsComplete && OnPinSubmitted.HasDelegate)
        {
            var pin = string.Join("", PinDigits);
            await OnPinSubmitted.InvokeAsync(pin);
        }
    }

    private async Task ClearPin()
    {
        Array.Clear(PinDigits, 0, 6);
        await JSRuntime.InvokeVoidAsync("focusElement", "pin-input-0");
        StateHasChanged();
        
        if (OnPinCleared.HasDelegate)
        {
            await OnPinCleared.InvokeAsync();
        }
    }

    public void SetError(string message)
    {
        ErrorMessage = message;
        SuccessMessage = "";
        StateHasChanged();
    }

    public void SetSuccess(string message)
    {
        SuccessMessage = message;
        ErrorMessage = "";
        StateHasChanged();
    }

    public void ClearMessages()
    {
        ErrorMessage = "";
        SuccessMessage = "";
        StateHasChanged();
    }
} 