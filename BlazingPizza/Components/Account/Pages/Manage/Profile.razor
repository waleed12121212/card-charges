@attribute [Authorize]
@page "/Account/Manage/Profile"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using BlazingPizza.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject BlazingPizza.PizzaStoreContext Db
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject PinService PinService
@inject PinSessionService PinSessionService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>الملف الشخصي</PageTitle>

<link href="~/css/pin-input.css" rel="stylesheet" />
<link href="~/css/profile-pin.css" rel="stylesheet" />
<script src="~/js/pin-helper.js"></script>

@if (isPageLoading)
{
    <div style="text-align:center; margin:2rem;">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">جاري التحميل...</span>
        </div>
    </div>
}
else if (isPinLocked)
{
    <div class="pin-locked-container" style="text-align: center; margin: 4rem auto; max-width: 500px; padding: 2rem; border-radius: 10px; background: #f8f9fa; border: 1px solid #dee2e6;">
        <div class="pin-locked-icon" style="font-size: 4rem; color: #dc3545; margin-bottom: 1rem;">
            <i class="fas fa-lock"></i>
        </div>
        <h2 style="color: #dc3545; margin-bottom: 1rem;">تم قفل الحساب مؤقتاً</h2>
        <p style="font-size: 1.1rem; margin-bottom: 1rem;">تم قفل حسابك لمدة @lockoutMinutes دقيقة بسبب المحاولات الخاطئة المتعددة.</p>
        <p style="color: #6c757d;">يرجى المحاولة مرة أخرى لاحقاً.</p>
        <button class="btn btn-secondary mt-3" @onclick="GoBackToHome">
            <i class="fas fa-arrow-right"></i>
            العودة للرئيسية
        </button>
    </div>
}
else if (!isPagePinVerified)
{
    <!-- PIN verification will be shown as overlay -->
}
else if (isLoading)
{
    <div style="text-align:center; margin:2rem;">جاري تحميل البيانات...</div>
}
else if (userNotFound)
{
    <div style="text-align:center; margin:2rem; color:red;">تعذر العثور على بيانات المستخدم.</div>
}
else
{
    <div class="profile-card-new">
        <div class="profile-avatar-new">
            <span>@(UserName.Length > 0 ? UserName.Substring(0 , 1) : "؟")</span>
        </div>
        <div class="profile-info-new">
            <div class="profile-row-new">
                <span class="profile-label-new">الاسم:</span>
                <span>@UserName</span>
            </div>
            <div class="profile-row-new">
                <span class="profile-label-new">البريد الإلكتروني:</span>
                <span>@Email</span>
            </div>
            <div class="profile-row-new">
                <span class="profile-label-new">رقم الجوال:</span>
                <span>@PhoneNumber</span>
            </div>
            <div class="profile-row-new">
                <span class="profile-label-new">الرقم السري:</span>
                <span class="pin-status-badge @(pinStatus?.HasPin == true ? "pin-active" : "pin-inactive")">
                    @if (pinStatus?.HasPin == true)
                    {
                        <i class="fas fa-shield-alt"></i>
                        <span>مفعل</span>
                    }
                    else
                    {
                        <i class="fas fa-shield"></i>
                        <span>غير مفعل</span>
                    }
                </span>
            </div>
        </div>
        <div class="profile-actions-new">
            <button class="profile-btn-new" @onclick="() => ShowEdit = true">تعديل البيانات</button>
            <button class="profile-btn-outline-new" @onclick="ChangePassword">تغيير كلمة المرور</button>
            <button class="profile-btn-pin-new @(pinStatus?.HasPin == true ? "pin-change" : "pin-set")" 
                    @onclick="() => ShowPinManagement = true">
                @if (pinStatus?.HasPin == true)
                {
                    <i class="fas fa-key"></i>
                    <span>إدارة الرقم السري</span>
                }
                else
                {
                    <i class="fas fa-plus"></i>
                    <span>تعيين رقم سري</span>
                }
            </button>
        </div>
    </div>
}

@if (ShowEdit)
{
    <div class="profile-edit-overlay" @onclick="CloseEdit">
        <div class="profile-edit-dialog" @onclick:stopPropagation>
            <h3 class="profile-edit-title">تعديل البيانات الشخصية</h3>

            @if (!string.IsNullOrEmpty(EditMessage))
            {
                <div class="alert @(EditSuccess ? "alert-success" : "alert-danger") mb-3">
                    @EditMessage
                </div>
            }

            <EditForm Model="EditModel" OnValidSubmit="SaveEdit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="profile-edit-field">
                    <label>الاسم</label>
                    <InputText @bind-Value="EditModel.UserName" class="profile-edit-input" />
                    <ValidationMessage For="() => EditModel.UserName" />
                </div>
                <div class="profile-edit-field">
                    <label>البريد الإلكتروني</label>
                    <InputText @bind-Value="EditModel.Email" class="profile-edit-input" />
                    <ValidationMessage For="() => EditModel.Email" />
                </div>
                <div class="profile-edit-field">
                    <label>رقم الجوال</label>
                    <InputText @bind-Value="EditModel.PhoneNumber" class="profile-edit-input" />
                    <ValidationMessage For="() => EditModel.PhoneNumber" />
                </div>
                <div class="profile-edit-actions">
                    <button type="submit" class="profile-btn-new">حفظ</button>
                    <button type="button" class="profile-btn-outline-new" @onclick="CloseEdit">إلغاء</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (ShowPinManagement)
{
    <div class="pin-management-overlay" @onclick="ClosePinManagement">
        <div class="pin-management-container" @onclick:stopPropagation="true">
            @if (pinManagementStep == PinManagementStep.Menu)
            {
                <div class="pin-management-menu">
                    <h3>
                        @if (pinStatus?.HasPin == true)
                        {
                            <span>إدارة الرقم السري</span>
                        }
                        else
                        {
                            <span>تعيين رقم سري جديد</span>
                        }
                    </h3>
                    
                    @if (pinStatus?.HasPin == true)
                    {
                        <div class="pin-menu-options">
                            <button class="pin-menu-btn" @onclick="() => pinManagementStep = PinManagementStep.Change">
                                <i class="fas fa-edit"></i>
                                <span>تغيير الرقم السري</span>
                            </button>
                            <button class="pin-menu-btn" @onclick="() => pinManagementStep = PinManagementStep.Remove">
                                <i class="fas fa-trash"></i>
                                <span>حذف الرقم السري</span>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="pin-menu-options">
                            <button class="pin-menu-btn pin-set-btn" @onclick="() => pinManagementStep = PinManagementStep.SetNew">
                                <i class="fas fa-plus"></i>
                                <span>إنشاء رقم سري جديد</span>
                            </button>
                        </div>
                    }
                    
                    <button class="pin-cancel-btn" @onclick="ClosePinManagement">
                        <i class="fas fa-times"></i>
                        إلغاء
                    </button>
                </div>
            }
            else if (pinManagementStep == PinManagementStep.SetNew)
            {
                <BlazingPizza.Components.Shared.PinInput 
                    Title="تعيين رقم سري جديد"
                    Description="يرجى إدخال رقم سري مكون من 6 أرقام"
                    SubmitButtonText="حفظ الرقم السري"
                    IsLoading="@isPinProcessing"
                    ErrorMessage="@pinErrorMessage"
                    SuccessMessage="@pinSuccessMessage"
                    OnPinSubmitted="HandleNewPinSubmission" />
                
                <button class="pin-back-btn" @onclick="() => pinManagementStep = PinManagementStep.Menu">
                    <i class="fas fa-arrow-right"></i>
                    العودة
                </button>
            }
            else if (pinManagementStep == PinManagementStep.Change)
            {
                @if (!currentPinVerified)
                {
                    <BlazingPizza.Components.Shared.PinInput 
                        Title="التحقق من الرقم السري الحالي"
                        Description="يرجى إدخال الرقم السري الحالي أولاً"
                        SubmitButtonText="تأكيد"
                        IsLoading="@isPinProcessing"
                        ErrorMessage="@pinErrorMessage"
                        SuccessMessage="@pinSuccessMessage"
                        OnPinSubmitted="HandleCurrentPinVerification" />
                }
                else
                {
                    <BlazingPizza.Components.Shared.PinInput 
                        Title="الرقم السري الجديد"
                        Description="يرجى إدخال الرقم السري الجديد"
                        SubmitButtonText="حفظ التغييرات"
                        IsLoading="@isPinProcessing"
                        ErrorMessage="@pinErrorMessage"
                        SuccessMessage="@pinSuccessMessage"
                        OnPinSubmitted="HandleNewPinSubmission" />
                }
                
                <button class="pin-back-btn" @onclick="() => { pinManagementStep = PinManagementStep.Menu; currentPinVerified = false; }">
                    <i class="fas fa-arrow-right"></i>
                    العودة
                </button>
            }
            else if (pinManagementStep == PinManagementStep.Remove)
            {
                @if (!currentPinVerified)
                {
                    <BlazingPizza.Components.Shared.PinInput 
                        Title="تأكيد حذف الرقم السري"
                        Description="يرجى إدخال الرقم السري الحالي للتأكيد"
                        SubmitButtonText="تأكيد الحذف"
                        IsLoading="@isPinProcessing"
                        ErrorMessage="@pinErrorMessage"
                        OnPinSubmitted="HandlePinRemoval" />
                }
                else
                {
                    <div class="pin-removal-confirmation">
                        <div class="pin-warning-icon">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <h4>تأكيد حذف الرقم السري</h4>
                        <p>هل أنت متأكد من رغبتك في حذف الرقم السري؟</p>
                        <p class="pin-warning-text">لن تحتاج لإدخال رقم سري للوصول للصفحات المحمية.</p>
                        
                        <div class="pin-confirmation-actions">
                            <button class="pin-confirm-remove-btn" @onclick="ConfirmPinRemoval" disabled="@isPinProcessing">
                                @if (isPinProcessing)
                                {
                                    <i class="fas fa-spinner fa-spin"></i>
                                }
                                else
                                {
                                    <i class="fas fa-trash"></i>
                                }
                                حذف الرقم السري
                            </button>
                            <button class="pin-cancel-remove-btn" @onclick="() => { pinManagementStep = PinManagementStep.Menu; currentPinVerified = false; }">
                                <i class="fas fa-times"></i>
                                إلغاء
                            </button>
                        </div>
                    </div>
                }
                
                @if (!currentPinVerified)
                {
                    <button class="pin-back-btn" @onclick="() => pinManagementStep = PinManagementStep.Menu">
                        <i class="fas fa-arrow-right"></i>
                        العودة
                    </button>
                }
            }
        </div>
    </div>
}

@* Password Change Dialog *@
@if (ShowPasswordChange)
{
    <div class="pin-overlay">
        <div class="pin-dialog">
            <div class="pin-header">
                <h3>تغيير كلمة المرور</h3>
                <button class="pin-close-btn" @onclick="ClosePasswordChange">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="pin-content">
                @if (!string.IsNullOrEmpty(passwordErrorMessage))
                {
                    <div class="error-message">
                        <i class="fas fa-exclamation-circle"></i>
                        @passwordErrorMessage
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(passwordSuccessMessage))
                {
                    <div class="success-message">
                        <i class="fas fa-check-circle"></i>
                        @passwordSuccessMessage
                    </div>
                }
                
                <div class="password-form">
                    <div class="form-group">
                        <label>كلمة المرور الحالية:</label>
                        <input type="password" class="form-control" @bind="currentPassword" 
                               disabled="@isPasswordProcessing" placeholder="أدخل كلمة المرور الحالية" />
                    </div>
                    
                    <div class="form-group">
                        <label>كلمة المرور الجديدة:</label>
                        <input type="password" class="form-control" @bind="newPassword" 
                               disabled="@isPasswordProcessing" placeholder="أدخل كلمة المرور الجديدة" />
                    </div>
                    
                    <div class="form-group">
                        <label>تأكيد كلمة المرور الجديدة:</label>
                        <input type="password" class="form-control" @bind="confirmPassword" 
                               disabled="@isPasswordProcessing" placeholder="أعد إدخال كلمة المرور الجديدة" />
                    </div>
                    
                    <div class="password-actions">
                        <button class="btn btn-primary" @onclick="SavePasswordChange" 
                                disabled="@(isPasswordProcessing || string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))">
                            @if (isPasswordProcessing)
                            {
                                <i class="fas fa-spinner fa-spin"></i>
                                <span>جاري التحديث...</span>
                            }
                            else
                            {
                                <i class="fas fa-save"></i>
                                <span>حفظ التغييرات</span>
                            }
                        </button>
                        
                        <button class="btn btn-secondary" @onclick="ClosePasswordChange" disabled="@isPasswordProcessing">
                            <i class="fas fa-times"></i>
                            إلغاء
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    string UserName = "";
    string Email = "";
    string PhoneNumber = "";
    bool isLoading = true;
    bool userNotFound = false;
    bool isPageLoading = true;
    bool isPagePinVerified = false;
    bool isPinLocked = false;
    int lockoutMinutes = 0;

    bool ShowEdit = false;
    EditProfileModel EditModel = new();
    string? EditMessage = "";
    bool EditSuccess = false;

    // متغيرات لحفظ القيم الأصلية
    string originalUserName = "";
    string originalEmail = "";
    string originalPhoneNumber = "";

    // PIN Management Variables
    private bool ShowPinManagement = false;
    private PinManagementStep pinManagementStep = PinManagementStep.Menu;
    private bool isPinProcessing = false;
    private bool currentPinVerified = false;
    private string pinErrorMessage = "";
    private string pinSuccessMessage = "";
    private PinStatusResult? pinStatus;

    // Page PIN verification variables
    private bool showPagePinVerification = false;

    // Password Change Variables
    private bool ShowPasswordChange = false;
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    private string passwordErrorMessage = "";
    private string passwordSuccessMessage = "";
    private bool isPasswordProcessing = false;

    protected override async Task OnInitializedAsync( )
    {
        await CheckPagePinRequirement();
    }

    private async Task CheckPagePinRequirement()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                userNotFound = true;
                isPageLoading = false;
                return;
            }

            // Check if PIN is already verified in session
            var isAlreadyVerified = await PinSessionService.IsPinVerifiedAsync(userId);
            if (isAlreadyVerified)
            {
                isPagePinVerified = true;
                await LoadUserData(userId);
                return;
            }

            // Check if user has PIN set and it's required
            var pinStatusResult = await PinService.GetPinStatusAsync(userId);
            
            if (pinStatusResult.HasPin && pinStatusResult.IsRequired && !pinStatusResult.IsLocked)
            {
                showPagePinVerification = true;
                isPageLoading = false;
            }
            else if (pinStatusResult.IsLocked)
            {
                isPinLocked = true;
                lockoutMinutes = pinStatusResult.LockoutMinutes;
                isPageLoading = false;
            }
            else
            {
                // No PIN required or PIN is locked, allow access
                isPagePinVerified = true;
                await LoadUserData(userId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking PIN requirement: {ex.Message}");
            // On error, allow access
            isPagePinVerified = true;
            var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
            if (!string.IsNullOrEmpty(userId))
            {
                await LoadUserData(userId);
            }
        }
    }

    private async Task LoadUserData(string userId)
    {
        var user = await Db.Users.FindAsync(userId);
        if (user == null)
        {
            userNotFound = true;
            isLoading = false;
            return;
        }

        UserName = user.UserName ?? "";
        Email = user.Email ?? "";
        PhoneNumber = user.PhoneNumber ?? "";

        // حفظ القيم الأصلية
        originalUserName = UserName;
        originalEmail = Email;
        originalPhoneNumber = PhoneNumber;

        // Initialize EditModel
        EditModel.UserName = UserName;
        EditModel.Email = Email;
        EditModel.PhoneNumber = PhoneNumber;

        // Load PIN status
        pinStatus = await PinService.GetPinStatusAsync(userId);

        isLoading = false;
        isPageLoading = false;
    }

    private async Task OnPagePinVerified()
    {
        isPagePinVerified = true;
        showPagePinVerification = false;
        
        var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
        if (!string.IsNullOrEmpty(userId))
        {
            await LoadUserData(userId);
        }
        
        StateHasChanged();
    }

    private async Task OnPagePinCancelled()
    {
        showPagePinVerification = false;
        NavigationManager.NavigateTo("/");
    }

    void CloseEdit( )
    {
        ShowEdit = false;
        EditMessage = "";
        EditSuccess = false;
        // إعادة القيم القديمة في حال الإلغاء
        EditModel.UserName = UserName;
        EditModel.Email = Email;
        EditModel.PhoneNumber = PhoneNumber;
    }

    async Task SaveEdit( )
    {
        // التحقق من أن شيئاً واحداً على الأقل تم تعديله
        bool hasChanges = false;

        if (EditModel.UserName != originalUserName)
            hasChanges = true;

        if (EditModel.Email != originalEmail)
            hasChanges = true;

        if (EditModel.PhoneNumber != originalPhoneNumber)
            hasChanges = true;

        if (!hasChanges)
        {
            EditMessage = "يجب تعديل شيء واحد على الأقل قبل الحفظ.";
            EditSuccess = false;
            return;
        }

        var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            var user = await Db.Users.FindAsync(userId);
            if (user == null) return;

            // التحقق من عدم تكرار البريد الإلكتروني لمستخدم آخر
            if (EditModel.Email != originalEmail && await Db.Users.AnyAsync(u => u.Email == EditModel.Email && u.Id != userId))
            {
                EditMessage = "البريد الإلكتروني مستخدم بالفعل.";
                EditSuccess = false;
                return;
            }

            // التحقق من عدم تكرار رقم الجوال لمستخدم آخر
            if (EditModel.PhoneNumber != originalPhoneNumber && await Db.Users.AnyAsync(u => u.PhoneNumber == EditModel.PhoneNumber && u.Id != userId))
            {
                EditMessage = "رقم الجوال مستخدم بالفعل.";
                EditSuccess = false;
                return;
            }

            // التحقق من عدم تكرار اسم المستخدم لمستخدم آخر
            if (EditModel.UserName != originalUserName && await Db.Users.AnyAsync(u => u.UserName == EditModel.UserName && u.Id != userId))
            {
                EditMessage = "اسم المستخدم مستخدم بالفعل.";
                EditSuccess = false;
                return;
            }

            user.UserName = EditModel.UserName;
            user.Email = EditModel.Email;
            user.PhoneNumber = EditModel.PhoneNumber;
            await Db.SaveChangesAsync();

            UserName = user.UserName;
            Email = user.Email ?? "";
            PhoneNumber = user.PhoneNumber ?? "";

            // تحديث القيم الأصلية
            originalUserName = UserName;
            originalEmail = Email;
            originalPhoneNumber = PhoneNumber;

            EditMessage = "تم حفظ التعديلات بنجاح!";
            EditSuccess = true;

            await Task.Delay(1500);
            ShowEdit = false;
            EditMessage = "";
        }
        catch (Exception ex)
        {
            EditMessage = $"حدث خطأ: {ex.Message}";
            EditSuccess = false;
        }
    }

    void ChangePassword( )
    {
        ShowPasswordChange = true;
        currentPassword = "";
        newPassword = "";
        confirmPassword = "";
        passwordErrorMessage = "";
        passwordSuccessMessage = "";
    }

    private void ClosePasswordChange()
    {
        ShowPasswordChange = false;
        currentPassword = "";
        newPassword = "";
        confirmPassword = "";
        passwordErrorMessage = "";
        passwordSuccessMessage = "";
        isPasswordProcessing = false;
    }

    private async Task SavePasswordChange()
    {
        passwordErrorMessage = "";
        passwordSuccessMessage = "";

        // التحقق من صحة البيانات
        if (string.IsNullOrEmpty(currentPassword))
        {
            passwordErrorMessage = "يرجى إدخال كلمة المرور الحالية";
            return;
        }

        if (string.IsNullOrEmpty(newPassword) || newPassword.Length < 6)
        {
            passwordErrorMessage = "كلمة المرور الجديدة يجب أن تكون 6 أحرف على الأقل";
            return;
        }

        if (newPassword != confirmPassword)
        {
            passwordErrorMessage = "كلمة المرور الجديدة وتأكيدها غير متطابقتان";
            return;
        }

        isPasswordProcessing = true;
        StateHasChanged();

        try
        {
            var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                passwordErrorMessage = "حدث خطأ في تحديد المستخدم";
                return;
            }

            var user = await Db.Users.FindAsync(userId);
            if (user == null)
            {
                passwordErrorMessage = "تعذر العثور على بيانات المستخدم";
                return;
            }

            // التحقق من كلمة المرور الحالية
            if (!BCrypt.Net.BCrypt.Verify(currentPassword, user.PasswordHash))
            {
                passwordErrorMessage = "كلمة المرور الحالية غير صحيحة";
                return;
            }

            // تحديث كلمة المرور
            user.PasswordHash = BCrypt.Net.BCrypt.HashPassword(newPassword);
            await Db.SaveChangesAsync();

            passwordSuccessMessage = "تم تغيير كلمة المرور بنجاح!";
            StateHasChanged();
            
            await Task.Delay(2000);
            ClosePasswordChange();
        }
        catch (Exception ex)
        {
            passwordErrorMessage = $"حدث خطأ أثناء تغيير كلمة المرور: {ex.Message}";
        }
        finally
        {
            isPasswordProcessing = false;
            StateHasChanged();
        }
    }

    private void ClosePinManagement()
    {
        ShowPinManagement = false;
        pinManagementStep = PinManagementStep.Menu;
        currentPinVerified = false;
        pinErrorMessage = "";
        pinSuccessMessage = "";
    }

    private async Task HandleNewPinSubmission(string pin)
    {
        isPinProcessing = true;
        pinErrorMessage = "";
        pinSuccessMessage = "";
        StateHasChanged();

        try
        {
            var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId)) return;

            var success = await PinService.SetPinAsync(userId, pin);
            
            if (success)
            {
                pinSuccessMessage = "تم حفظ الرقم السري بنجاح!";
                pinStatus = await PinService.GetPinStatusAsync(userId);
                StateHasChanged();
                
                await Task.Delay(2000);
                ClosePinManagement();
            }
            else
            {
                pinErrorMessage = "فشل في حفظ الرقم السري. يرجى المحاولة مرة أخرى.";
            }
        }
        catch (Exception ex)
        {
            pinErrorMessage = "يجب أن يكون الرقم السري مكون من 6 أرقام فقط.";
        }
        finally
        {
            isPinProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleCurrentPinVerification(string pin)
    {
        isPinProcessing = true;
        pinErrorMessage = "";
        pinSuccessMessage = "";
        StateHasChanged();

        try
        {
            var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId)) return;

            var result = await PinService.VerifyPinAsync(userId, pin);
            
            if (result.Success)
            {
                currentPinVerified = true;
                pinSuccessMessage = "تم التحقق بنجاح!";
                StateHasChanged();
                await Task.Delay(1000);
                pinSuccessMessage = "";
            }
            else
            {
                pinErrorMessage = result.Message;
            }
        }
        catch (Exception)
        {
            pinErrorMessage = "حدث خطأ في التحقق. يرجى المحاولة مرة أخرى.";
        }
        finally
        {
            isPinProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandlePinRemoval(string pin)
    {
        isPinProcessing = true;
        pinErrorMessage = "";
        StateHasChanged();

        try
        {
            var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId)) return;

            var result = await PinService.VerifyPinAsync(userId, pin);
            
            if (result.Success)
            {
                currentPinVerified = true;
                StateHasChanged();
            }
            else
            {
                pinErrorMessage = result.Message;
            }
        }
        catch (Exception)
        {
            pinErrorMessage = "حدث خطأ في التحقق. يرجى المحاولة مرة أخرى.";
        }
        finally
        {
            isPinProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmPinRemoval()
    {
        isPinProcessing = true;
        StateHasChanged();

        try
        {
            var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId)) return;

            var success = await PinService.RemovePinAsync(userId);
            
            if (success)
            {
                pinStatus = await PinService.GetPinStatusAsync(userId);
                StateHasChanged();
                
                await Task.Delay(1000);
                ClosePinManagement();
            }
            else
            {
                pinErrorMessage = "فشل في حذف الرقم السري. يرجى المحاولة مرة أخرى.";
            }
        }
        catch (Exception)
        {
            pinErrorMessage = "حدث خطأ في حذف الرقم السري.";
        }
        finally
        {
            isPinProcessing = false;
            StateHasChanged();
        }
    }

    private void GoBackToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    class EditProfileModel
    {
        [Required(ErrorMessage = "اسم المستخدم مطلوب")]
        public string UserName { get; set; } = "";
        [Required(ErrorMessage = "البريد الإلكتروني مطلوب"), EmailAddress(ErrorMessage = "البريد الإلكتروني غير صحيح")]
        public string Email { get; set; } = "";
        [Phone(ErrorMessage = "رقم الجوال غير صحيح")]
        public string PhoneNumber { get; set; } = "";
    }

    private enum PinManagementStep
    {
        Menu,
        SetNew,
        Change,
        Remove
    }
}

<BlazingPizza.Components.Shared.PinVerificationDialog ShowDialog="@showPagePinVerification"
                                                      OnPinVerified="@OnPagePinVerified"
                                                      OnCancelled="@OnPagePinCancelled"
                                                      PendingAction="profile-access" /> 