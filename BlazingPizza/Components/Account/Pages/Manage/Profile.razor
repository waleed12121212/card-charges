@attribute [Authorize]
@page "/Account/Manage/Profile"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject BlazingPizza.PizzaStoreContext Db
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>الملف الشخصي</PageTitle>

@if (isLoading)
{
    <div style="text-align:center; margin:2rem;">جاري تحميل البيانات...</div>
}
else if (userNotFound)
{
    <div style="text-align:center; margin:2rem; color:red;">تعذر العثور على بيانات المستخدم.</div>
}
else
{
    <div class="profile-card-new">
        <div class="profile-avatar-new">
            <span>@(UserName.Length > 0 ? UserName.Substring(0 , 1) : "؟")</span>
        </div>
        <div class="profile-info-new">
            <div class="profile-row-new">
                <span class="profile-label-new">الاسم:</span>
                <span>@UserName</span>
            </div>
            <div class="profile-row-new">
                <span class="profile-label-new">البريد الإلكتروني:</span>
                <span>@Email</span>
            </div>
            <div class="profile-row-new">
                <span class="profile-label-new">رقم الجوال:</span>
                <span>@PhoneNumber</span>
            </div>
        </div>
        <div class="profile-actions-new">
            <button class="profile-btn-new" @onclick="() => ShowEdit = true">تعديل البيانات</button>
            <button class="profile-btn-outline-new" @onclick="ChangePassword">تغيير كلمة المرور</button>
        </div>
    </div>
}

@if (ShowEdit)
{
    <div class="profile-edit-overlay" @onclick="CloseEdit">
        <div class="profile-edit-dialog" @onclick:stopPropagation>
            <h3 class="profile-edit-title">تعديل البيانات الشخصية</h3>

            @if (!string.IsNullOrEmpty(EditMessage))
            {
                <div class="alert @(EditSuccess ? "alert-success" : "alert-danger") mb-3">
                    @EditMessage
                </div>
            }

            <EditForm Model="EditModel" OnValidSubmit="SaveEdit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="profile-edit-field">
                    <label>الاسم</label>
                    <InputText @bind-Value="EditModel.UserName" class="profile-edit-input" />
                    <ValidationMessage For="() => EditModel.UserName" />
                </div>
                <div class="profile-edit-field">
                    <label>البريد الإلكتروني</label>
                    <InputText @bind-Value="EditModel.Email" class="profile-edit-input" />
                    <ValidationMessage For="() => EditModel.Email" />
                </div>
                <div class="profile-edit-field">
                    <label>رقم الجوال</label>
                    <InputText @bind-Value="EditModel.PhoneNumber" class="profile-edit-input" />
                    <ValidationMessage For="() => EditModel.PhoneNumber" />
                </div>
                <div class="profile-edit-actions">
                    <button type="submit" class="profile-btn-new">حفظ</button>
                    <button type="button" class="profile-btn-outline-new" @onclick="CloseEdit">إلغاء</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    string UserName = "";
    string Email = "";
    string PhoneNumber = "";
    bool isLoading = true;
    bool userNotFound = false;

    bool ShowEdit = false;
    EditProfileModel EditModel = new();
    string? EditMessage = "";
    bool EditSuccess = false;

    // متغيرات لحفظ القيم الأصلية
    string originalUserName = "";
    string originalEmail = "";
    string originalPhoneNumber = "";

    protected override async Task OnInitializedAsync( )
    {
        var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userId))
        {
            userNotFound = true;
            isLoading = false;
            return;
        }
        var user = await Db.Users.FindAsync(userId);
        if (user == null)
        {
            userNotFound = true;
            isLoading = false;
            return;
        }

        UserName = user.UserName;
        Email = user.Email ?? "";
        PhoneNumber = user.PhoneNumber ?? "";

        // حفظ القيم الأصلية
        originalUserName = UserName;
        originalEmail = Email;
        originalPhoneNumber = PhoneNumber;

        EditModel.UserName = UserName;
        EditModel.Email = Email;
        EditModel.PhoneNumber = PhoneNumber;
        isLoading = false;
    }

    void CloseEdit( )
    {
        ShowEdit = false;
        EditMessage = "";
        EditSuccess = false;
        // إعادة القيم القديمة في حال الإلغاء
        EditModel.UserName = UserName;
        EditModel.Email = Email;
        EditModel.PhoneNumber = PhoneNumber;
    }

    async Task SaveEdit( )
    {
        // التحقق من أن شيئاً واحداً على الأقل تم تعديله
        bool hasChanges = false;

        if (EditModel.UserName != originalUserName)
            hasChanges = true;

        if (EditModel.Email != originalEmail)
            hasChanges = true;

        if (EditModel.PhoneNumber != originalPhoneNumber)
            hasChanges = true;

        if (!hasChanges)
        {
            EditMessage = "يجب تعديل شيء واحد على الأقل قبل الحفظ.";
            EditSuccess = false;
            return;
        }

        var userId = HttpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            var user = await Db.Users.FindAsync(userId);
            if (user == null) return;

            // التحقق من عدم تكرار البريد الإلكتروني لمستخدم آخر
            if (EditModel.Email != originalEmail && await Db.Users.AnyAsync(u => u.Email == EditModel.Email && u.Id != userId))
            {
                EditMessage = "البريد الإلكتروني مستخدم بالفعل.";
                EditSuccess = false;
                return;
            }

            // التحقق من عدم تكرار رقم الجوال لمستخدم آخر
            if (EditModel.PhoneNumber != originalPhoneNumber && await Db.Users.AnyAsync(u => u.PhoneNumber == EditModel.PhoneNumber && u.Id != userId))
            {
                EditMessage = "رقم الجوال مستخدم بالفعل.";
                EditSuccess = false;
                return;
            }

            // التحقق من عدم تكرار اسم المستخدم لمستخدم آخر
            if (EditModel.UserName != originalUserName && await Db.Users.AnyAsync(u => u.UserName == EditModel.UserName && u.Id != userId))
            {
                EditMessage = "اسم المستخدم مستخدم بالفعل.";
                EditSuccess = false;
                return;
            }

            user.UserName = EditModel.UserName;
            user.Email = EditModel.Email;
            user.PhoneNumber = EditModel.PhoneNumber;
            await Db.SaveChangesAsync();

            UserName = user.UserName;
            Email = user.Email ?? "";
            PhoneNumber = user.PhoneNumber ?? "";

            // تحديث القيم الأصلية
            originalUserName = UserName;
            originalEmail = Email;
            originalPhoneNumber = PhoneNumber;

            EditMessage = "تم حفظ التعديلات بنجاح!";
            EditSuccess = true;

            await Task.Delay(1500);
            ShowEdit = false;
            EditMessage = "";
        }
        catch (Exception ex)
        {
            EditMessage = $"حدث خطأ: {ex.Message}";
            EditSuccess = false;
        }
    }

    void ChangePassword( )
    {
    }

    class EditProfileModel
    {
        [Required(ErrorMessage = "اسم المستخدم مطلوب")]
        public string UserName { get; set; } = "";
        [Required(ErrorMessage = "البريد الإلكتروني مطلوب"), EmailAddress(ErrorMessage = "البريد الإلكتروني غير صحيح")]
        public string Email { get; set; } = "";
        [Phone(ErrorMessage = "رقم الجوال غير صحيح")]
        public string PhoneNumber { get; set; } = "";
    }
} 