@page "/"
@attribute [Authorize]
@rendermode InteractiveWebAssembly
@inject ICarrierRepository CarrierRepository
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IRefillCardRepository RefillCardRepository
@inject ITransactionRepository TransactionRepository
@inject IInternetPackageRepository InternetPackageRepository
@inject IInternetPackagePurchaseRepository InternetPackagePurchaseRepository
@inject INotificationRepository NotificationRepository
@using System.Security.Claims
@using BlazingPizza.Shared.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<PageTitle>الرئيسية</PageTitle>

@code {
    private List<Carrier>? carriers;
    private List<RefillCard>? refillCards;
    private Carrier? selectedCarrier;
    private bool showCarriers = true;
    private bool showRefillCards = false;
    private string sidebarTab = "financial";
    private string? selectedSection;
    private List<Transaction>? transactions;
    private NotificationPanel? notificationPanel;

    // PIN verification variables
    private bool isPinVerified = false;
    private bool showPinVerification = false;
    private string pendingSection = "";
    private string[] pinDigits = new string[] { "", "", "", "", "", "" };
    private bool isPinProcessing = false;
    private string pinErrorMessage = string.Empty;

    private string selectedOperator = "";
    private decimal selectedAmount = 0;
    private string phoneNumber = "";
    private decimal[] rechargeAmounts = new[] { 5m , 10m , 20m , 50m , 100m , 200m };
    private decimal customAmount = 0;
    private bool isCustomAmount = false;
    private string rechargeMessage = string.Empty;
    private bool rechargeSuccess = false;
    private bool isLoading = false;
    private bool isPhoneInvalid = false;
    private string phonePrefix = "059";

    private bool showingConfigureDialog = false;
    private RefillCard? configuringRefillCard;
    private int quantity = 1;

    // Internet packages variables
    private List<InternetPackage>? internetPackages;
    private CarrierType? selectedInternetCarrier;
    private bool showInternetCarriers = true;
    private bool showInternetPackages = false;
    private string internetPhoneNumber = "";
    private bool isInternetPhoneInvalid = false;
    private string internetPhonePrefix = "059";
    private InternetPackage? selectedInternetPackage;
    private bool isInternetLoading = false;
    private string internetMessage = string.Empty;
    private bool internetSuccess = false;

    protected override async Task OnInitializedAsync( )
    {
        try
        {
            carriers = await CarrierRepository.GetCarriers();
            // جلب معرف المستخدم الحالي من AuthenticationStateProvider
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Add detailed debugging
            Console.WriteLine("Authentication State Details:");
            Console.WriteLine($"Is Authenticated: {user.Identity?.IsAuthenticated}");
            Console.WriteLine($"Authentication Type: {user.Identity?.AuthenticationType}");

            // Only load transactions if user is authenticated
            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                Console.WriteLine($"User ID: {userId}");
                
                if (!string.IsNullOrEmpty(userId))
                {
                    try
                    {
                        transactions = await TransactionRepository.GetByUserIdAsync(userId);
                        Console.WriteLine($"Loaded {transactions?.Count ?? 0} transactions");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error loading transactions: {ex.Message}");
                        transactions = new List<Transaction>();
                    }
                }
                else
                {
                    Console.WriteLine("User ID is null or empty");
                    transactions = new List<Transaction>();
                }
            }
            else
            {
                Console.WriteLine("User is not authenticated");
                transactions = new List<Transaction>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            carriers = new List<Carrier>();
            transactions = new List<Transaction>();
        }
    }

    private async Task CheckPinAndSelectSection(string section)
    {
        Console.WriteLine($"CheckPinAndSelectSection called for section: {section}");
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/Account/Login");
            return;
        }

        // Check if PIN is already verified in session
        try
        {
            var response = await Http.GetAsync("/api/pin/verify-session");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                if (result == "true")
                {
                    isPinVerified = true;
                    SelectSection(section);
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking PIN session: {ex.Message}");
        }

        // Check if user has PIN set
        try
        {
            var response = await Http.GetAsync("/api/pin/status");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"PIN status response: {content}");
                var hasPin = content.Contains("\"hasPin\":true");
                
                if (!hasPin)
                {
                    // No PIN set, allow access
                    Console.WriteLine("No PIN set, allowing access");
                    SelectSection(section);
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking PIN status: {ex.Message}");
        }

        Console.WriteLine("PIN required, showing verification dialog");
        // PIN is required, show verification
        pendingSection = section;
        showPinVerification = true;
        
        // Clear PIN digits
        for (int i = 0; i < pinDigits.Length; i++)
        {
            pinDigits[i] = "";
        }
        pinErrorMessage = "";
        StateHasChanged();
        
        // Focus first input field after a short delay
        await Task.Delay(100);
        await FocusField(0);
    }

    private void OnPinVerified()
    {
        isPinVerified = true;
        showPinVerification = false;
        SelectSection(pendingSection);
    }

    private void OnPinCancelled()
    {
        showPinVerification = false;
        pendingSection = "";
        
        // Clear PIN digits and error message
        for (int i = 0; i < pinDigits.Length; i++)
        {
            pinDigits[i] = "";
        }
        pinErrorMessage = "";
        isPinProcessing = false;
    }

    private async Task OnPinKeyDown(KeyboardEventArgs e, int index)
    {
        if (e.Key == "Backspace")
        {
            if (!string.IsNullOrEmpty(pinDigits[index]))
            {
                // Clear current field
                pinDigits[index] = "";
            }
            else if (index > 0)
            {
                // Move to previous field and clear it
                pinDigits[index - 1] = "";
                await FocusField(index - 1);
            }
            StateHasChanged();
        }
        else if (e.Key == "ArrowLeft" && index > 0)
        {
            await FocusField(index - 1);
        }
        else if (e.Key == "ArrowRight" && index < 5)
        {
            await FocusField(index + 1);
        }
        else if (e.Key == "Enter" && IsPinComplete)
        {
            await VerifyPin();
        }
    }

    private async Task OnPinInput(ChangeEventArgs e, int index)
    {
        string value = e.Value?.ToString() ?? "";
        
        if (string.IsNullOrEmpty(value))
        {
            pinDigits[index] = "";
            return;
        }

        // Only allow digits
        if (value.Length > 0 && char.IsDigit(value[0]))
        {
            pinDigits[index] = value[0].ToString();
            
            // Move to next field if not the last one
            if (index < 5)
            {
                await FocusField(index + 1);
            }
            else if (IsPinComplete)
            {
                // Auto-submit when all digits are entered
                await VerifyPin();
            }
        }
        else
        {
            pinDigits[index] = "";
        }
        
        StateHasChanged();
    }

    private async Task FocusField(int index)
    {
        try
        {
            Console.WriteLine($"Attempting to focus field {index}");
            await JSRuntime.InvokeVoidAsync("focusElement", $"pin-input-{index}");
            Console.WriteLine($"Successfully focused field {index}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error focusing field {index}: {ex.Message}");
        }
    }

    private async Task VerifyPin()
    {
        if (!IsPinComplete)
        {
            pinErrorMessage = "يرجى إدخال الرقم السري كاملاً";
            return;
        }

        isPinProcessing = true;
        pinErrorMessage = string.Empty;
        string enteredPin = string.Join("", pinDigits);
        Console.WriteLine($"Attempting to verify PIN: '{enteredPin}' (length: {enteredPin.Length})");
        StateHasChanged();

        try
        {
            var requestData = new { Pin = enteredPin };
            Console.WriteLine($"Sending request data: {System.Text.Json.JsonSerializer.Serialize(requestData)}");
            
            var response = await Http.PostAsJsonAsync("api/pin/verify", requestData);
            Console.WriteLine($"Response status: {response.StatusCode}");
            
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response content: {responseContent}");
            
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("PIN verification successful!");
                // Clear PIN digits for security
                for (int i = 0; i < pinDigits.Length; i++)
                {
                    pinDigits[i] = "";
                }
                OnPinVerified();
            }
            else
            {
                Console.WriteLine($"PIN verification failed. Status: {response.StatusCode}, Content: {responseContent}");
                
                if (responseContent.Contains("message"))
                {
                    try
                    {
                        var errorObj = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(responseContent);
                        if (errorObj.ContainsKey("message"))
                        {
                            pinErrorMessage = errorObj["message"].ToString();
                        }
                        else
                        {
                            pinErrorMessage = "رقم السر غير صحيح. حاول مرة أخرى.";
                        }
                    }
                    catch
                    {
                        pinErrorMessage = "رقم السر غير صحيح. حاول مرة أخرى.";
                    }
                }
                else
                {
                    pinErrorMessage = $"خطأ: {response.StatusCode} - {responseContent}";
                }
                
                // Clear PIN digits after failed attempt
                for (int i = 0; i < pinDigits.Length; i++)
                {
                    pinDigits[i] = "";
                }
                
                // Focus first input field
                await Task.Delay(100);
                await FocusField(0);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during PIN verification: {ex}");
            pinErrorMessage = $"حدث خطأ أثناء التحقق: {ex.Message}";
            
            // Clear PIN digits
            for (int i = 0; i < pinDigits.Length; i++)
            {
                pinDigits[i] = "";
            }
        }
        finally
        {
            isPinProcessing = false;
            StateHasChanged();
        }
    }

    private bool IsPinComplete => pinDigits.All(d => !string.IsNullOrEmpty(d));


    private string GetRefillCardImagePath(RefillCard card)
    {
        if (!string.IsNullOrEmpty(card.imageName))
            return $"img/refillcard/{card.imageName}";
        return "img/pizzas/1.jpg"; // صورة افتراضية
    }

    private async Task SelectCarrier(Carrier carrier)
    {
        selectedCarrier = carrier;
        showCarriers = false;
        StateHasChanged();

        // Load refill cards for the selected carrier
        refillCards = await RefillCardRepository.GetByCarrierId(carrier.id);

        // Trigger animation
        await Task.Delay(100);
        showRefillCards = true;
        StateHasChanged();
    }

    private void GoBackToCarriers( )
    {
        showRefillCards = false;
        StateHasChanged();

        // Wait for animation to complete
        Task.Delay(300).ContinueWith(_ =>
        {
            selectedCarrier = null;
            refillCards = null;
            showCarriers = true;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ShowConfigureRefillCardDialog(RefillCard card)
    {
        configuringRefillCard = card;
        showingConfigureDialog = true;
        quantity = 1;
    }
    private void CancelConfigureRefillCard( )
    {
        showingConfigureDialog = false;
        configuringRefillCard = null;
        quantity = 1;
    }

    private async Task ConfirmConfigureRefillCard( )
    {
        try
        {
            if (configuringRefillCard == null) return;

            isLoading = true;

            // Create purchase request
            var request = new RefillCardPurchaseRequest
                {
                    RefillCardId = configuringRefillCard.id ,
                    Quantity = quantity
                };

            // Send purchase request
            var response = await Http.PostAsJsonAsync("api/refillcard/purchase" , request);

            if (response.IsSuccessStatusCode)
            {
                // Refresh transactions list
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    transactions = await TransactionRepository.GetByUserIdAsync(userId);
                }

                // Show success toast notification
                await JSRuntime.ShowSuccess("تم الشراء بنجاح", $"تم شراء {quantity} {configuringRefillCard.ProductName} بنجاح");
                
                // Refresh notifications panel
                if (notificationPanel != null)
                {
                    await notificationPanel.RefreshNotifications();
                }
                
                showingConfigureDialog = false;
                configuringRefillCard = null;
                quantity = 1;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    await JSRuntime.ShowError("خطأ في المصادقة", "يرجى تسجيل الدخول أولاً");
                    NavigationManager.NavigateTo("/Account/Login" , true);
                }
                else
                {
                    await JSRuntime.ShowError("خطأ في الشراء", $"حدث خطأ أثناء عملية الشراء: {error}");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.ShowError("خطأ", "حدث خطأ أثناء عملية الشراء");
            Console.WriteLine($"Error in ConfirmConfigureRefillCard: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    void SetSidebarTab(string tab)
    {
        sidebarTab = tab;
        StateHasChanged();
    }

    private void SelectOperator(string operatorName)
    {
        selectedOperator = operatorName;
        phoneNumber = "";
        phonePrefix = operatorName switch
        {
            "Jawwal" => "059",
            "Ooredoo" => "056",
            "Cellcom" => "052",
            _ => ""
        };
        ValidatePhone();
    }

    private void SelectAmount(decimal amount)
    {
        selectedAmount = amount;
        isCustomAmount = false;
        customAmount = 0;
    }

    private void SetCustomAmountSelected( )
    {
        isCustomAmount = true;
        if (customAmount > 0)
            selectedAmount = customAmount;
    }
    private void SetCustomAmountSelectedChanged(ChangeEventArgs e)
    {
        isCustomAmount = true;
        if (decimal.TryParse(e.Value?.ToString() , out var val))
        {
            customAmount = val;
            selectedAmount = val;
        }
    }

    private bool IsFormValid( )
    {
        return !string.IsNullOrEmpty(selectedOperator)
            && selectedAmount > 0
            && !string.IsNullOrEmpty(phoneNumber);
    }

    private async Task SubmitRecharge( )
    {
        rechargeMessage = string.Empty;
        rechargeSuccess = false;
        isLoading = true;
        try
        {
            var rechargeData = new Recharge
                {
                    UserId = "" , // سيتم ملؤه في الـ API من المستخدم الحالي
                    Operator = selectedOperator ,
                    Amount = selectedAmount ,
                    PhoneNumber = phonePrefix + phoneNumber , // إرسال الرقم مع البادئة
                    Date = DateTime.Now
                };
            var response = await Http.PostAsJsonAsync("api/recharge" , rechargeData);
            if (response.IsSuccessStatusCode)
            {
                // Show success toast notification
                await JSRuntime.ShowSuccess("تم شحن الرصيد بنجاح", $"تم شحن رصيد بقيمة {selectedAmount} شيكل للرقم {phonePrefix + phoneNumber}");
                
                // Refresh notifications panel
                if (notificationPanel != null)
                {
                    await notificationPanel.RefreshNotifications();
                }
                
                rechargeMessage = "تم شحن الرصيد بنجاح!";
                rechargeSuccess = true;
                // إعادة تعيين الحقول
                selectedOperator = "";
                selectedAmount = 0;
                customAmount = 0;
                isCustomAmount = false;
                phoneNumber = "";
            }
            else
            {
                await JSRuntime.ShowError("خطأ في الشحن", "حدث خطأ أثناء الشحن. حاول مرة أخرى.");
                rechargeMessage = "حدث خطأ أثناء الشحن. حاول مرة أخرى.";
                rechargeSuccess = false;
            }
        }
        catch
        {
            await JSRuntime.ShowError("خطأ في الاتصال", "تعذر الاتصال بالخادم. حاول لاحقاً.");
            rechargeMessage = "تعذر الاتصال بالخادم. حاول لاحقاً.";
            rechargeSuccess = false;
        }
        isLoading = false;
    }

    private void SelectSection(string section)
    {
        selectedSection = section;
        if (section == "carrier")
        {
            selectedCarrier = null;
            showCarriers = true;
            showRefillCards = false;
        }
    }
    private void BackToMainMenu( )
    {
        selectedSection = null;
        selectedCarrier = null;
        showCarriers = true;
        showRefillCards = false;
    }

    private void ValidatePhone(ChangeEventArgs e = null)
    {
        if (e != null)
            phoneNumber = e.Value?.ToString() ?? "";
        string pattern = phonePrefix switch
        {
            "059" => @"^059\d{7}$",
            "056" => @"^056\d{7}$",
            "052" => @"^052\d{7}$",
            _ => @"^05\d{8}$"
        };
        isPhoneInvalid = !System.Text.RegularExpressions.Regex.IsMatch(phonePrefix + phoneNumber , pattern);
    }

    // Internet packages methods
    private async Task SelectInternetCarrier(CarrierType carrierType)
    {
        selectedInternetCarrier = carrierType;
        showInternetCarriers = false;
        showInternetPackages = true;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Requesting packages for carrier: {carrierType} (ID: {(int)carrierType})");
            internetPackages = await InternetPackageRepository.GetActivePackagesByCarrierAsync(carrierType);
            await JSRuntime.InvokeVoidAsync("console.log", $"Received {internetPackages?.Count ?? 0} packages");
            
            if (internetPackages != null && internetPackages.Any())
            {
                foreach (var package in internetPackages)
                {
                    await JSRuntime.InvokeVoidAsync("console.log", $"Package: {package.Name}, Active: {package.IsActive}, Carrier: {package.CarrierType}");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.log", "No packages found or packages list is null");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading packages: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", ex.ToString());
            internetPackages = new List<InternetPackage>();
        }
    }

    private void BackToInternetCarriers()
    {
        showInternetCarriers = true;
        showInternetPackages = false;
        selectedInternetCarrier = null;
        internetPackages = null;
    }

    private void ValidateInternetPhone(ChangeEventArgs e = null)
    {
        if (e != null)
            internetPhoneNumber = e.Value?.ToString() ?? "";
        string pattern = internetPhonePrefix switch
        {
            "059" => @"^059\d{7}$",
            "056" => @"^056\d{7}$", 
            "052" => @"^052\d{7}$",
            _ => @"^05\d{8}$"
        };
        isInternetPhoneInvalid = !System.Text.RegularExpressions.Regex.IsMatch(internetPhonePrefix + internetPhoneNumber, pattern);
    }

    private async Task PurchaseInternetPackage(InternetPackage package)
    {
        if (string.IsNullOrEmpty(internetPhoneNumber) || isInternetPhoneInvalid)
        {
            await JSRuntime.ShowError("خطأ في البيانات", "يرجى إدخال رقم هاتف صحيح");
            internetMessage = "يرجى إدخال رقم هاتف صحيح";
            internetSuccess = false;
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated == true)
        {
            await JSRuntime.ShowWarning("تسجيل الدخول مطلوب", "يرجى تسجيل الدخول أولاً");
            NavigationManager.NavigateTo("/Account/Login");
            return;
        }

        isInternetLoading = true;
        internetMessage = "";

        try
        {
            var request = new 
            {
                InternetPackageId = package.Id,
                PhoneNumber = internetPhonePrefix + internetPhoneNumber,
                Notes = $"Internet package purchase for {package.Name}"
            };

            var response = await Http.PostAsJsonAsync("api/internetpackagepurchase", request);
            
            if (response.IsSuccessStatusCode)
            {
                // Show success toast notification
                await JSRuntime.ShowSuccess("تم شراء الحزمة بنجاح", $"تم شراء حزمة {package.Name} بنجاح للرقم {internetPhonePrefix + internetPhoneNumber}");
                
                // Refresh notifications panel
                if (notificationPanel != null)
                {
                    await notificationPanel.RefreshNotifications();
                }
                
                internetMessage = $"تم شراء حزمة {package.Name} بنجاح للرقم {internetPhonePrefix + internetPhoneNumber}";
                internetSuccess = true;
                internetPhoneNumber = "";
                
                // Refresh transactions
                var user = authState.User;
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    transactions = await TransactionRepository.GetByUserIdAsync(userId);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.ShowError("فشل في شراء الحزمة", errorContent);
                internetMessage = $"فشل في شراء الحزمة: {errorContent}";
                internetSuccess = false;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.ShowError("خطأ", $"حدث خطأ: {ex.Message}");
            internetMessage = $"حدث خطأ: {ex.Message}";
            internetSuccess = false;
        }
        finally
        {
            isInternetLoading = false;
        }
    }
}

<!-- Main Section Selector -->
@if (selectedSection == null)
{
    <div class="main-section-selector" style="background: none;">
        <div class="card" style="width: 18rem;  cursor: pointer; @(selectedSection == "carrier" ? "active" : "")" @onclick="@(() => CheckPinAndSelectSection("carrier"))">
            <img class="card-img-top" src="img/home/product.jpg" alt="البضائع الالكترونية">
            <div class="card-body @(selectedSection == "carrier" ? "active" : "")">
                <h5 class="card-title">البضائع الالكترونية</h5>
            </div>
        </div>
        <div class="card" style="width: 18rem; cursor: pointer;  @(selectedSection == "recharge" ? "active" : "")" @onclick="@(() => CheckPinAndSelectSection("recharge"))">
            <img class="card-img-top" src="img/home/refillbalance.png" alt="شحن رصيد">
            <div class="card-body @(selectedSection == "recharge" ? "active" : "")">
                <h5 class="card-title">شحن رصيد</h5>
            </div>
        </div>
        <div class="card" style="width: 18rem;  cursor: pointer; @(selectedSection == "internet" ? "active" : "")" @onclick="@(() => CheckPinAndSelectSection("internet"))">
            <img class="card-img-top" src="img/home/3G.png" alt="حزم الانترنت">
            <div class="card-body @(selectedSection == "internet" ? "active" : "")">
                <h5 class="card-title">حزم الانترنت</h5>
            </div>
        </div>
    </div>
}

@* PIN Verification Dialog *@
@if (showPinVerification)
{
    <div class="pin-overlay">
        <div class="pin-dialog">
            <div class="pin-header">
                <h3>التحقق من الرقم السري</h3>
                <button class="pin-close-btn" @onclick="OnPinCancelled">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="pin-content">
                <p>يرجى إدخال الرقم السري للوصول إلى هذا القسم</p>
                
                <div class="pin-inputs-container" style="display: flex; gap: 12px; justify-content: center; margin-bottom: 1.5rem;">
                    @for (int i = 0; i < 6; i++)
                    {
                        int index = i;
                        <input @key="@($"pin-{index}")"
                               id="@($"pin-input-{index}")"
                               class="pin-input"
                               style="width: 50px; height: 50px; border: 2px solid #ccc; border-radius: 8px; text-align: center; font-size: 1.5rem; font-weight: bold;"
                               type="password"
                               maxlength="1"
                               @bind="pinDigits[index]"
                               @onkeydown="@((e) => OnPinKeyDown(e, index))"
                               @oninput="@((e) => OnPinInput(e, index))"
                               inputmode="numeric"
                               pattern="[0-9]"
                               autocomplete="off" />
                    }
                </div>
                
                <div class="pin-actions">
                    <button class="btn btn-primary" @onclick="VerifyPin" 
                            disabled="@(isPinProcessing || !IsPinComplete)">
                        @if (isPinProcessing)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>جاري التحقق...</span>
                        }
                        else
                        {
                            <span>تأكيد</span>
                        }
                    </button>
                    
                    <button class="btn btn-secondary" @onclick="OnPinCancelled" disabled="@isPinProcessing">
                        <i class="fas fa-times"></i>
                        إلغاء
                    </button>
                </div>
                
                @if (!string.IsNullOrEmpty(pinErrorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @pinErrorMessage
                    </div>
                }
            </div>
        </div>
    </div>
}
else if (selectedSection == "carrier")
{
    <div class="main">
        <button class="btn btn-outline-secondary mb-4" @onclick="BackToMainMenu">&larr; رجوع للقائمة الرئيسية</button>
        @if (selectedCarrier == null)
        {
            <!-- Carrier Selection View -->
            <div class="carrier-view @(showCarriers ? "show" : "")">
                <ul class="pizza-cards">
                    @if (carriers is not null)
                    {
                        @foreach (var carrier in carriers)
                        {
                            <li @onclick="@(() => SelectCarrier(carrier))" style="cursor: pointer;">
                                <div class="card-content">
                                    <img src="@($"img/carrier/{carrier.imageName}")" alt="@carrier.carrierName" class="card-logo" />
                                    <div class="pizza-info">
                                        <span class="title">@carrier.carrierName</span>
                                    </div>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        }
        else
        {
            <!-- Refill Cards View -->
            <div class="refill-cards-view @(showRefillCards ? "show" : "")">
                <button class="btn btn-outline-secondary mb-4" @onclick="GoBackToCarriers">&larr; رجوع للشركات</button>
                <h2 class="carrier-title">@selectedCarrier?.carrierName - بطاقات الشحن</h2>
                <ul class="pizza-cards">
                    @if (refillCards == null)
                    {
                        <li><p>جاري التحميل...</p></li>
                    }
                    else if (!refillCards.Any())
                    {
                        <li><p>لا توجد بطاقات شحن متاحة لهذه الشركة.</p></li>
                    }
                    else
                    {
                        @foreach (var card in refillCards)
                        {
                            <li @onclick="@(() => ShowConfigureRefillCardDialog(card))" style="cursor: pointer;">
                                <div class="card-content">
                                    <img src="@GetRefillCardImagePath(card)" alt="@card.ProductName" class="card-logo" />
                                    <div class="pizza-info">
                                        <span class="title">@card.ProductName</span>
                                    </div>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        }
    </div>
}
else if (selectedSection == "recharge")
{
    <div class="recharge-card">
        <button class="btn btn-outline-secondary mb-4" style="margin-bottom:2rem;width:100%;font-size:1.1rem;" @onclick="BackToMainMenu">&larr; رجوع للقائمة الرئيسية</button>
        <div class="recharge-inner">
            <div class="recharge-title">شحن رصيد</div>
            @if (!string.IsNullOrEmpty(rechargeMessage))
            {
                <div class="@(rechargeSuccess ? "recharge-success" : "recharge-error")">@rechargeMessage</div>
            }
            <div>
                <div class="recharge-section-title">اختر الشريحة</div>
                <div class="recharge-operators">
                    <button class="recharge-operator-btn @(selectedOperator == "Jawwal" ? "selected" : "")" @onclick="@(() => SelectOperator("Jawwal"))">
                        <img src="img/recharge-balance/Jawwal.png" alt="Jawwal" />
                        <span>جوال</span>
                    </button>
                    <button class="recharge-operator-btn @(selectedOperator == "Ooredoo" ? "selected" : "")" @onclick="@(() => SelectOperator("Ooredoo"))">
                        <img src="img/recharge-balance/ooredoo.png" alt="Ooredoo" />
                        <span>اوريدو</span>
                    </button>
                    <button class="recharge-operator-btn @(selectedOperator == "Cellcom" ? "selected" : "")" @onclick="@(() => SelectOperator("Cellcom"))">
                        <img src="img/recharge-balance/celecom.png" alt="Cellcom" />
                        <span>سيليكوم</span>
                    </button>
                </div>
            </div>
            <div>
                <div class="recharge-section-title">اختر قيمة الشحن</div>
                <div class="recharge-amounts">
                    @foreach (var amount in rechargeAmounts)
                    {
                        <button class="recharge-amount-btn @(selectedAmount == amount && !isCustomAmount ? "selected" : "")" @onclick="() => SelectAmount(amount)">
                            @amount شيكل
                        </button>
                    }
                </div>
                <div class="recharge-custom-amount">
                    <label class="recharge-custom-label" for="customAmount">المبلغ</label>
                    <input id="customAmount" class="recharge-custom-input @(isCustomAmount ? "selected" : "")" type="number" min="1" step="1" @bind="customAmount" @onfocus="SetCustomAmountSelected" @oninput="SetCustomAmountSelectedChanged" placeholder="مخصص" />
                </div>
            </div>
            <div>
                <div class="recharge-section-title">رقم الهاتف</div>
                <div class="phone-input-wrapper">
                    <input class="recharge-phone-input @(isPhoneInvalid ? "invalid" : "")"
                           type="tel"
                           maxlength="7"
                           @bind="phoneNumber"
                           @oninput="ValidatePhone"
                           placeholder="XXXXXXX" />
                    <span class="phone-prefix">@phonePrefix</span>
                </div>
                @if (isPhoneInvalid)
                {
                    <div class="phone-validation-message">
                        رقم الهاتف غير صحيح. يجب أن يكون بالصيغة (@phonePrefix-XXXXXXX)
                    </div>
                }
            </div>
            <button class="recharge-submit-btn" @onclick="SubmitRecharge" disabled="@(!IsFormValid() || isLoading )">
                @if (isLoading)
                {
                    <span>جاري الشحن...</span>
                }
                else
                {
                    <span>شحن الرصيد</span>
                }
            </button>
        </div>
    </div>
}
else if (selectedSection == "internet")
{
    <div class="main">
        <button class="btn btn-outline-secondary mb-4" @onclick="BackToMainMenu">&larr; رجوع للقائمة الرئيسية</button>
        
        @if (showInternetCarriers)
        {
            <!-- Internet Carrier Selection View -->
            <div class="carrier-view show">
                <h2>اختر الشريحة</h2>
                <ul class="pizza-cards">
                    <li @onclick="@(() => SelectInternetCarrier(CarrierType.جوال))" style="cursor: pointer;">
                        <div class="card-content">
                            <img src="img/recharge-balance/Jawwal.png" alt="جوال" class="card-logo" />
                            <div class="pizza-info">
                                <span class="title">جوال</span>
                            </div>
                        </div>
                    </li>
                    <li @onclick="@(() => SelectInternetCarrier(CarrierType.أوريدو))" style="cursor: pointer;">
                        <div class="card-content">
                            <img src="img/recharge-balance/ooredoo.png" alt="أوريدو" class="card-logo" />
                            <div class="pizza-info">
                                <span class="title">أوريدو</span>
                            </div>
                        </div>
                    </li>
                    <li @onclick="@(() => SelectInternetCarrier(CarrierType.سيليكوم))" style="cursor: pointer;">
                        <div class="card-content">
                            <img src="img/recharge-balance/celecom.png" alt="سيليكوم" class="card-logo" />
                            <div class="pizza-info">
                                <span class="title">سيليكوم</span>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        }
        else if (showInternetPackages && selectedInternetCarrier != null)
        {
            <!-- Internet Packages View -->
            <div class="internet-packages-view">
                <button class="btn btn-outline-secondary mb-3" @onclick="BackToInternetCarriers">&larr; رجوع لاختيار الشريحة</button>
                
                <h2>حزم الإنترنت - @selectedInternetCarrier?.GetDisplayName()</h2>
                
                @if (!string.IsNullOrEmpty(internetMessage))
                {
                    <div class="alert @(internetSuccess ? "alert-success" : "alert-danger")" role="alert">
                        @internetMessage
                    </div>
                }

                <!-- Phone Number Input -->
                <div class="mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">رقم الهاتف</h5>
                            <div class="row">
                                <div class="col-md-3">
                                    <select class="form-select" @bind="internetPhonePrefix" @bind:after="() => ValidateInternetPhone()">
                                        <option value="059">059</option>
                                        <option value="056">056</option>
                                        <option value="052">052</option>
                                    </select>
                                </div>
                                <div class="col-md-9">
                                    <input type="text" class="form-control @(isInternetPhoneInvalid ? "is-invalid" : "")" 
                                           @bind="internetPhoneNumber" @oninput="ValidateInternetPhone" 
                                           placeholder="XXXXXXX" maxlength="7" />
                                    @if (isInternetPhoneInvalid)
                                    {
                                        <div class="invalid-feedback">
                                            رقم الهاتف غير صحيح. يجب أن يكون بالصيغة (@internetPhonePrefix-XXXXXXX)
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Internet Packages -->
                @if (internetPackages == null)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">جاري التحميل...</span>
                        </div>
                    </div>
                }
                else if (!internetPackages.Any())
                {
                    <div class="alert alert-info" role="alert">
                        <i class="fas fa-info-circle"></i> لا توجد حزم إنترنت متاحة لهذه الشريحة حالياً.
                    </div>
                }
                else
                {
                    <div class="row">
                        @foreach (var package in internetPackages)
                        {
                            <div class="col-md-6 col-lg-4 mb-3">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">@package.Name</h5>
                                        <p class="card-text">@package.Description</p>
                                        <div class="package-details">
                                            <div class="detail-item">
                                                <i class="fas fa-database"></i>
                                                <span>@package.DataAmountDisplay</span>
                                            </div>
                                            <div class="detail-item">
                                                <i class="fas fa-clock"></i>
                                                <span>@package.ValidityDisplay</span>
                                            </div>
                                            <div class="detail-item">
                                                <i class="fas fa-tag"></i>
                                                <span>@package.PackageType</span>
                                            </div>
                                        </div>
                                        <div class="price-section">
                                            <span class="price">@package.Price.ToString("C")</span>
                                        </div>
                                    </div>
                                    <div class="card-footer">
                                        <button class="btn btn-primary btn-block" 
                                                @onclick="@(() => PurchaseInternetPackage(package))"
                                                disabled="@(isInternetLoading || string.IsNullOrEmpty(internetPhoneNumber) || isInternetPhoneInvalid)">
                                            @if (isInternetLoading)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                                <span>جاري الشراء...</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-shopping-cart"></i>
                                                <span>شراء الحزمة</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
}

<div class="sidebar financial-sidebar">
    <AuthorizeView>
        <Authorized>
            <div style="display:flex; gap:1rem; margin-bottom:1rem;">
                <button class="btn btn-outline-secondary" @onclick='@(() => SetSidebarTab("financial"))' style="flex:1;@(sidebarTab=="financial" ? "background:#00668c;color:#fff;" : "")">
                    الحركات المالية
                </button>
                <button class="btn btn-outline-secondary" @onclick='@(() => SetSidebarTab("checkout"))' style="flex:1;@(sidebarTab=="checkout" ? "background:#00668c;color:#fff;" : "")">
                    الإشعارات
                </button>
            </div>
            @if (sidebarTab == "financial")
            {
                <h3 style="margin-top:0">سجل الحركات المالية</h3>
                @if (transactions == null)
                {
                    <p>جاري تحميل الحركات المالية...</p>
                }
                else if (transactions.Any())
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>رقم الحركة</th>
                                <th>الوصف</th>
                                <th>تاريخ الحركة</th>
                                <th>المبلغ</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var t in transactions.OrderByDescending(x => x.Date))
                            {
                                <tr>
                                    <td>@t.Id</td>
                                    <td>@t.Description</td>
                                    <td>@t.Date.ToString("yyyy/MM/dd HH:mm")</td>
                                    <td>@($"{t.Amount:0.00} ₪")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>لا توجد حركات مالية</p>
                }
            }
            else if (sidebarTab == "checkout")
            {
                <h3 style="margin-top:0">الإشعارات</h3>
                <NotificationPanel @ref="notificationPanel" />
            }
        </Authorized>
        <NotAuthorized>
            <div style="text-align: center; padding: 2rem;">
                <h4>يرجى تسجيل الدخول</h4>
                <p>لعرض الحركات المالية والإشعارات</p>
                <a href="/Account/Login" class="btn btn-primary">تسجيل الدخول</a>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@if (showingConfigureDialog)
{
    <div class="dialog-container">
        <div class="dialog">
            <div class="dialog-header">
                <h2>شراء بطاقة شحن</h2>
                <button class="close-button" @onclick="CancelConfigureRefillCard">×</button>
            </div>
            <div class="dialog-content">
                <div class="product-info">
                    <img src="@GetRefillCardImagePath(configuringRefillCard)" alt="@configuringRefillCard?.ProductName" class="product-image" />
                    <div class="product-details">
                        <h3>@configuringRefillCard?.ProductName</h3>
                        <p class="price">@($"{configuringRefillCard?.price:0.00} ₪")</p>
                    </div>
                </div>
            </div>
            <div class="dialog-footer">
                <button class="btn btn-secondary" @onclick="CancelConfigureRefillCard">إلغاء</button>
                <button class="btn btn-success" @onclick="ConfirmConfigureRefillCard">تأكيد الشراء</button>
            </div>
        </div>
    </div>
}