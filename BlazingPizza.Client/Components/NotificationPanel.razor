@inject INotificationRepository NotificationRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@using System.Security.Claims
@using BlazingPizza.Shared
@using Microsoft.AspNetCore.Components.Authorization

<div class="notification-panel">
    <div class="notification-header">
        <h5>الإشعارات</h5>
        @if (unreadCount > 0)
        {
            <span class="badge badge-danger">@unreadCount</span>
        }
        @if (notifications.Any(n => !n.IsRead))
        {
            <button class="btn btn-sm btn-link" @onclick="MarkAllAsRead">
                تحديد الكل كمقروء
            </button>
        }
    </div>

    <div class="notification-list">
        @if (isLoading)
        {
            <div class="text-center p-3">
                <div class="spinner-border spinner-border-sm" role="status">
                    <span class="sr-only">جاري التحميل...</span>
                </div>
            </div>
        }
        else if (notifications.Any())
        {
            @foreach (var notification in notifications.Take(10))
            {
                <div class="notification-item @(notification.IsRead ? "read" : "unread")"
                     @onclick="() => MarkAsRead(notification.Id)">
                    <div class="notification-content">
                        <div class="notification-title">
                            @notification.Title
                            @if (!notification.IsRead)
                            {
                                <span class="new-indicator"></span>
                            }
                        </div>
                        <div class="notification-message">
                            @notification.Message
                        </div>
                        <div class="notification-time">
                            @GetTimeAgo(notification.CreatedAt)
                        </div>
                    </div>
                    <div class="notification-type-icon">
                        @switch (notification.Type)
                        {
                            case NotificationType.Purchase:
                                <i class="fas fa-shopping-cart text-success"></i>
                                break;
                            case NotificationType.CreditTopUp:
                                <i class="fas fa-mobile-alt text-primary"></i>
                                break;
                            case NotificationType.PackagePurchase:
                                <i class="fas fa-box text-info"></i>
                                break;
                            case NotificationType.System:
                                <i class="fas fa-cog text-secondary"></i>
                                break;
                            case NotificationType.Warning:
                                <i class="fas fa-exclamation-triangle text-warning"></i>
                                break;
                            case NotificationType.Success:
                                <i class="fas fa-check-circle text-success"></i>
                                break;
                            default:
                                <i class="fas fa-bell text-info"></i>
                                break;
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center p-3 text-muted">
                <i class="fas fa-bell-slash"></i>
                <p>لا توجد إشعارات</p>
            </div>
        }
    </div>
</div>

@code {
    private List<Notification> notifications = new();
    private int unreadCount = 0;
    private bool isLoading = true;
    private string? currentUserId;

    protected override async Task OnInitializedAsync( )
    {
        await LoadNotifications();
    }

    private async Task LoadNotifications( )
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(currentUserId))
            {
                notifications = await NotificationRepository.GetUserNotificationsAsync(currentUserId , 50);
                unreadCount = await NotificationRepository.GetUnreadCountAsync(currentUserId);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.ShowError("خطأ" , "فشل في تحميل الإشعارات");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task MarkAsRead(int notificationId)
    {
        try
        {
            await NotificationRepository.MarkAsReadAsync(notificationId);
            var notification = notifications.FirstOrDefault(n => n.Id == notificationId);
            if (notification != null && !notification.IsRead)
            {
                notification.IsRead = true;
                unreadCount = Math.Max(0 , unreadCount - 1);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.ShowError("خطأ" , "فشل في تحديث الإشعار");
        }
    }

    private async Task MarkAllAsRead( )
    {
        try
        {
            if (!string.IsNullOrEmpty(currentUserId))
            {
                await NotificationRepository.MarkAllAsReadAsync(currentUserId);
                foreach (var notification in notifications)
                {
                    notification.IsRead = true;
                }
                unreadCount = 0;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.ShowError("خطأ" , "فشل في تحديث الإشعارات");
        }
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "الآن";
        if (timeSpan.TotalMinutes < 60)
            return $"منذ {(int)timeSpan.TotalMinutes} دقيقة";
        if (timeSpan.TotalHours < 24)
            return $"منذ {(int)timeSpan.TotalHours} ساعة";
        if (timeSpan.TotalDays < 7)
            return $"منذ {(int)timeSpan.TotalDays} يوم";

        return dateTime.ToString("dd/MM/yyyy");
    }

    public async Task RefreshNotifications( )
    {
        await LoadNotifications();
    }
} 